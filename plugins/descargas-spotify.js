/*import fetch from 'node-fetch';

let handler = async (m, { conn, args, command, usedPrefix }) => {
  const text = args.join(" ");
  if (!text) {
    return m.reply(
      `‚ü¨‚ü¨ üå∏ *SPOTIFY - DESCARGAS* üå∏ ‚ü≠‚ü≠
‚ï≠‚îÄ‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚îÄ‚ïÆ
‚îÇ ü™∑ Uso correcto:
‚îÇ ‚§∑ ${usedPrefix + command} dj opus
‚ï∞‚îÄ‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚îÄ‚ïØ
     ‚å¨ ùë©ùíêùíï: *Rin Itoshi*`
    );
  }

  await m.react('üîç');

  try {
    const searchRes = await fetch(`https://api.vreden.my.id/api/spotifysearch?query=${encodeURIComponent(text)}`);
    const searchJson = await searchRes.json();

    if (!searchJson.result || searchJson.result.length === 0) {
      return m.reply(
        `‚ü¨‚ü¨ üå∏ *SPOTIFY - DESCARGAS* üå∏ ‚ü≠‚ü≠
‚ï≠‚îÄ‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚îÄ‚ïÆ
‚îÇ ‚ùå No encontr√© resultados para:
‚îÇ ‚§∑ *${text}*
‚ï∞‚îÄ‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚îÄ‚ïØ
     ‚å¨ ùë©ùíêùíï: *Rin Itoshi*`
      );
    }

    const track = searchJson.result[0];
    const { title, artist, album, duration, releaseDate, spotifyLink, coverArt } = track;

    const detailRes = await fetch(`https://api.vreden.my.id/api/spotify?url=${encodeURIComponent(spotifyLink)}`);
    const detailJson = await detailRes.json();

    if (!detailJson.result?.music) {
      return m.reply(
        `‚ü¨‚ü¨ üå∏ *SPOTIFY - DESCARGAS* üå∏ ‚ü≠‚ü≠
‚ï≠‚îÄ‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚îÄ‚ïÆ
‚îÇ ‚ö†Ô∏è No pude obtener el audio de:
‚îÇ ‚§∑ *${title}*
‚ï∞‚îÄ‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚îÄ‚ïØ
     ‚å¨ ùë©ùíêùíï: *Rin Itoshi*`
      );
    }

    const audioUrl = detailJson.result.music;

    await conn.sendMessage(m.chat, {
      image: { url: coverArt },
      caption: `‚ü¨‚ü¨ üéº *SPOTIFY - TRACK* üéº ‚ü≠‚ü≠
‚ï≠‚îÄ‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚îÄ‚ïÆ
‚îÇ üéµ *T√≠tulo:* ${title}
‚îÇ üë§ *Artista:* ${artist}
‚îÇ üíø *√Ålbum:* ${album}
‚îÇ ‚è±Ô∏è *Duraci√≥n:* ${duration}
‚îÇ üìÖ *Lanzamiento:* ${releaseDate}
‚îÇ üåê *Spotify:* ${spotifyLink}
‚ï∞‚îÄ‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚îÄ‚ïØ
     ‚å¨ ùë©ùíêùíï: *Rin Itoshi*`
    }, { quoted: m });

    await conn.sendMessage(m.chat, {
      audio: { url: audioUrl },
      mimetype: 'audio/mp4',
      ptt: false,
      fileName: `${title}.mp3`
    }, { quoted: m });

    await m.react('‚úÖ');

  } catch (e) {
    console.error(e);
    return m.reply(
      `‚ü¨‚ü¨ üå∏ *SPOTIFY - DESCARGAS* üå∏ ‚ü≠‚ü≠
‚ï≠‚îÄ‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚îÄ‚ïÆ
‚îÇ ‚ö†Ô∏è Ocurri√≥ un error inesperado.
‚îÇ üîÑ Intenta nuevamente m√°s tarde.
‚ï∞‚îÄ‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚îÄ‚ïØ
     ‚å¨ ùë©ùíêùíï: *Rin Itoshi*`
    );
  }
};

handler.help = ['spotify'];
handler.tags = ['descargas'];
handler.command = ['spotify'];
handler.register = true;

export default handler;*/

import axios from 'axios';

let handler = async (m, { conn, text }) => {

  if (!text) return m.reply(`üçÇ Ingresa el nombre de una canci√≥n o una URL de Spotify.`);

  try {
    let song;
    const isSpotifyUrl = text.startsWith('https://open.spotify.com/');
    if (isSpotifyUrl) {
      song = { url: text };
    } else {
      const results = await spotifyxv(text);
      if (!results.length) return m.reply('No se encontr√≥ la canci√≥n.');
      song = results[0];
    }

    await conn.sendMessage(m.chat, { react: { text: 'üïì', key: m.key } });
     
    const res = await axios.get(`https://api.stellarwa.xyz/dow/spotify?url=${song.url}&apikey=proyectsV2`);
    const data = res.data?.data;
    if (!data?.download) return m.reply('No se pudo obtener el enlace de descarga.');

    const info = `[ ‚úø ] Descargando ‚Ä∫ *${data.title}*\n\n` +
                 `> [‚ú©] Artista ‚Ä∫ *${data.artist}*\n` +
                 (song.album ? `> ‚ú∞ √Ålbum ‚Ä∫ *${song.album}*\n` : '') +
                 `> üå± Duraci√≥n ‚Ä∫ *${data.duration}*\n` +
                 `> üçÇ Enlace ‚Ä∫ *${song.url}*`;

    await conn.sendMessage(m.chat, { image: { url: data.image }, caption: info }, { quoted: m });
    
    
    await conn.sendMessage(m.chat, {
      audio: { url: data.download },
      ptt: true,
      fileName: `${data.title}.mp3`,
      mimetype: 'audio/mpeg'
    }, { quoted: m });
    
    /*await conn.sendMessage(m.chat, {
      audio: { url: data.download },
      mimetype: 'audio/mpeg',
      ptt: true,
      fileName: `${data.title}.mp3`,
      contextInfo: {
        externalAdReply: {
          title: data.title,
          body: `Duraci√≥n: ${data.duration}`,
          mediaType: 1,
          thumbnailUrl: data.image,
          mediaUrl: song.url,
          sourceUrl: song.url,
          renderLargerThumbnail: true
        }
      }
    }, { quoted: m });*/
    
    await conn.sendMessage(m.chat, { react: { text: '‚úÖ', key: m.key } });

  } catch (e) {
    await m.reply('‚ùå Error al procesar la canci√≥n.');
  }
};

handler.tags = ['descargas'];
handler.help = ['spotify'];
handler.command = ['spotify'];
export default handler;

async function spotifyxv(query) {
  const res = await axios.get(`https://api.stellarwa.xyz/search/spotify?query=${encodeURIComponent(query)}&apikey=proyectsV2`);
  if (!res.data?.status || !res.data?.data?.length) return [];

  const firstTrack = res.data.data[0];

  return [{
    name: firstTrack.title,
    artista: [firstTrack.artist],
    album: firstTrack.album,
    duracion: firstTrack.duration,
    url: firstTrack.url,
    imagen: firstTrack.image || ''
  }];
}